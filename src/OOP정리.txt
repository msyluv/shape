1. 상속
	상속이란 부모가 자식에게 물려주는 것이다.
 	B가 A를 상속한다면 extends를 통해 중복을 줄여줄 수 있다.
 	또한 상속은 하나의 클래스가 하나만 상속할 수 있다.
 	정리하자면, 
 	- 클래스 사이의 멤버 중복선언 불필요
    - 필드, 메쏘드 재사용으로 클래스가 간결
    - 클래스간 계층적 분류 및 관리 
 	를 위해 상속이 필요하다.

2. 캡슐화(정보은닉)
	- 객체를 사용하는 쪽에서는 그 객체의 메서드를 통해 객체를 이용하고 객체의 데이터가 실제 어떻
       게 처리되는지 자세히 알 필요가 없다.
    - 객체를 작성할 때 개발자는 숨겨야 하는 정보와 공개하는 정보를 구분하여 기술
	- 객체 정보중 공개된 정보에만 접근이 가능 하다 (Information Hiding, 정보은닉)
	
3. 다형성
	- 오버로딩(overloading) :
	생성자 : 인스턴스가 생성될 때마다 호출되는 ‘인스턴스 초기화 메서드’,
	       모든 클래스에는 반드시 하나 이상의 생성자 필요
	     public class Book {
              public Book() { }
         }
	       
	메소드 : 객체의 행동 정의, 함수를 의미한다.
	   public Song() {}

   	   public Song( String title, String artist, String album, String Composer, int year, int track) {
        this.title = title;
        this.artist = artist;
        this.album = album;
        .
        .
       }
       public Song( String title, String artist) {
        this(title, artist, “”, null, 0, 0); 
       }  
       
     같은 클래스에 같은 이름의 메쏘드가  여러 개 존재할 수 있다.
    
    -오버라이딩(Overriding)
     OOP의 꽃   
	 부모클래스와 자식 클래스의 메소드 사이에서 발생하는 관계
	 부모클래스의 메소드를 동일한 이름으로 재작성 (같은 이름, 같은 리턴 타입, 같은 파라미터)
	 부모클래스 메소드 무시하기
	 
	 메소드 오버라이딩 : 자식 클래스에서 부모의 메소드 중 하나를 다시 정의!
     
	
 
	